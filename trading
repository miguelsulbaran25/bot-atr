//+------------------------------------------------------------------+
//|                                                media-mas-trx.mq5 |
//|                                  Copyright 2024, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2024, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
//+------------------------------------------------------------------+
//| include                                                          |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>

//+------------------------------------------------------------------+
//| inputs                                                           |
//+------------------------------------------------------------------+
input group "=== General ==="
static input long    InpMagicnumber    = 73463;  //numero magico
static input double  InpLotSize        = 0.01;   //lotaje
input group "=== trading ==="
input double         InpTriggerLv1     = 2.0;    // nivel trigger a factor de ATR
input double         InpStopLossATR    = 5.0;    // stop loss a factor de ATR (o=off)
enum TP_MODE_ENUM
{
   TP_MODE_ATR,      // take profit a factor de atr
   TP_MODE_MA        // take profit a MA
};
input TP_MODE_ENUM   InpTPMode         = TP_MODE_ATR; // take profit modo
input double         InpTakeProfitATR  = 4.0;         // take profit a factor de ATR (0=off)
input bool           InpCloseBySignal  = false;       // cerrar las posicion contraria
input group "=== Media Movil ==="
input int            InpPeriodMA       = 21;          // periodo media movil
input group "=== rango verdadero promedio ==="
input int            InpPeriodATR      = 21;          // periodo ATR
//+------------------------------------------------------------------+
//| global variables                                                 |
//+------------------------------------------------------------------+
int handleMA;
int handleATR;
double bufferMA[];
double bufferATR[];
MqlTick tick;
CTrade trade;
CPositionInfo position;
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
  
   //verificar las entradas de usuario
   if(!CheckInputs()){return INIT_PARAMETERS_INCORRECT;}
   
   // establecer un número mágico para intercambiar objetos
   trade.SetExpertMagicNumber(InpMagicnumber);
   
   // crear handles indicadores
   handleMA = iMA(_Symbol,PERIOD_CURRENT,InpPeriodMA,0,MODE_SMA,PRICE_CLOSE);
   if(handleMA == INVALID_HANDLE){
      Alert("fallo en crear handle MA");
      return INIT_FAILED;
   }
   handleATR = iATR(_Symbol,PERIOD_CURRENT,InpPeriodATR);
   if(handleATR == INVALID_HANDLE){
      Alert("fallo en crear handle ATR");
      return INIT_FAILED;
   }
   
   // establecer buffer una serie
   ArraySetAsSeries(bufferMA,true);
   ArraySetAsSeries(bufferATR,true);
   
   //indicador dibujado en el gráfico
   ChartIndicatorDelete(NULL,0,"MA("+IntegerToString(InpPeriodMA)+")");
   ChartIndicatorAdd(NULL,0,handleMA);
   ChartIndicatorDelete(NULL,1,"ATR("+IntegerToString(InpPeriodATR)+")");
   ChartIndicatorAdd(NULL,1,handleATR);

   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   // handle indicador
   if(handleMA!= INVALID_HANDLE){
      ChartIndicatorDelete(NULL,0,"MA("+IntegerToString(InpPeriodMA)+")");
      IndicatorRelease(handleMA);
   }
   if(handleATR!= INVALID_HANDLE){
      ChartIndicatorDelete(NULL,1,"ATR("+IntegerToString(InpPeriodATR)+")");
      IndicatorRelease(handleATR);
   }  
}
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // obtener ticket
   if(!SymbolInfoTick(_Symbol,tick)){
      Print("fallo en obtener el ticket");
      return;
   }
   // obtener valores de ma y atr
   int values = CopyBuffer(handleMA,0,0,1,bufferMA) + CopyBuffer(handleATR,0,0,1,bufferATR);
   if(values!=2){
      Print("fallo en obtener valores del indicador");
      return;
   }
   double MA  = bufferMA[0];
   double ATR = bufferATR[0];
   Comment("MA:",MA,"\nATR:",ATR);
   
   //conte de posiciones abiertas
   int cntBuy, cntSell;
   CountOpenPositions(cntBuy,cntSell);
   
   //verifica la posicion de compra
   if(cntBuy ==0 && tick.ask <= MA-ATR*InpTriggerLv1){
      
      // cerrar posicion venta
      if(InpCloseBySignal){ClosePositions(false);}
      
         //calcula sl/tp
         double sl = InpStopLossATR==0 ? 0 : tick.bid - ATR*InpStopLossATR;
         double tp = InpTPMode==TP_MODE_MA ? 0 : InpTakeProfitATR==0 ? 0 : tick.ask + ATR*InpTakeProfitATR;
         
         //normalizar precio
         if(!NormalizePrice(sl)){return;}
         if(!NormalizePrice(tp)){return;}
         
         // abrir operacion de compra 
         trade.PositionOpen(_Symbol,ORDER_TYPE_BUY,InpLotSize,tick.ask,sl,tp,"MA EA");
   }
   
   //verifica la posicion de venta
   if(cntSell ==0 && tick.bid >= MA+ATR*InpTriggerLv1){
      
      // cerrar posicion compra
      if(InpCloseBySignal){ClosePositions(true);}
      
         //calcula sl/tp
         double sl = InpStopLossATR==0 ? 0 : tick.ask + ATR*InpStopLossATR;
         double tp = InpTPMode==TP_MODE_MA ? 0 : InpTakeProfitATR==0 ? 0 : tick.bid - ATR*InpTakeProfitATR;
         
         //normalizar precio
         if(!NormalizePrice(sl)){return;}
         if(!NormalizePrice(tp)){return;}
         
         // abrir operacion de venta 
         trade.PositionOpen(_Symbol,ORDER_TYPE_SELL,InpLotSize,tick.bid,sl,tp,"MA EA");
   }
   
   // verifica posicion de compra y el take profit
   if(cntBuy>0 && InpTPMode==TP_MODE_MA && tick.bid >= MA){ClosePositions(true);}
   if(cntSell>0 && InpTPMode==TP_MODE_MA && tick.ask <= MA){ClosePositions(false);}
   
   DrawObjects(MA,ATR);
}

bool CheckInputs()
{
   if(InpMagicnumber <=0){
      Alert("numero magico incorrecto: <=0");
      return false;
   }
   if(InpLotSize <=0){
      Alert("lotaje incorrecto: <=0");
      return false;
   }
   if(InpTriggerLv1 <=0){
      Alert("nivel trigger incorrecto: <=0");
      return false;
   }
   if(InpStopLossATR < 0){
      Alert("stop los incorrecto: < 0");
      return false;
   }
   if(InpTPMode==TP_MODE_ATR && InpTakeProfitATR < 0){
      Alert("take profit incorrecto: < 0");
      return false;
   }
   if(InpPeriodMA <= 1){
      Alert("periodo de media movil incorrecto: < 0");
      return false;
   }
   if(InpPeriodATR <= 1){
      Alert("periodo de ATR incorrecto: < 0");
      return false;
   }
   
   return true;
}

// normalizar precio
bool NormalizePrice(double &price){
   
   double tickSize=0;
   if(!SymbolInfoDouble(_Symbol,SYMBOL_TRADE_TICK_SIZE,tickSize)){
      Print("fallo en obtener el tikeck");
      return false;
      
   }
   price = NormalizeDouble((price/tickSize)*tickSize,_Digits);
   
   return true;
}

// count open positions
void CountOpenPositions(int &cntBuy, int &cntSell){
   
   cntBuy = 0;
   cntSell = 0;
   int total = PositionsTotal();
   for(int i=total-1; i>=0; i--){
      position.SelectByIndex(i);
      if(position.Magic() == InpMagicnumber){
         if(position.PositionType() == POSITION_TYPE_BUY){cntBuy++;}
         if(position.PositionType() == POSITION_TYPE_SELL){cntSell++;}
      }
   } 
}

//cerrar posiciones 
void ClosePositions(bool buy_sell){

   int total = PositionsTotal();
   for(int i=total-1; i>=0; i--){
      position.SelectByIndex(i);
      if(position.Magic() == InpMagicnumber){
         if(buy_sell && position.PositionType() == POSITION_TYPE_SELL){continue;}
         if(!buy_sell && position.PositionType() == POSITION_TYPE_BUY){continue;}
         trade.PositionClose(position.Ticket());
      }
   } 
}


// draw trigger levels above and beneath the MA
void DrawObjects(double maValue, double atrValue){

   ObjectDelete(NULL,"TriggerBuy");
   ObjectCreate(NULL,"TriggerBuy",OBJ_HLINE,0,0,maValue-atrValue*InpTriggerLv1);
   ObjectSetInteger(NULL,"TriggerBuy",OBJPROP_COLOR,clrBlue);
   
   ObjectDelete(NULL,"TriggerSell");
   ObjectCreate(NULL,"TriggerSell",OBJ_HLINE,0,0,maValue+atrValue*InpTriggerLv1);
   ObjectSetInteger(NULL,"TriggerSell",OBJPROP_COLOR,clrBlue);
   

}
